※ 시작문자가 '*'인 경우 개인적인 정리를 의미함

>>웹 페이지를 불러오기까지의 과정

1. 일단 주소를 입력하고 엔터가 눌려졌을 때, 웹 브라우저는 그 인터넷 주소의 서버를 찾아 파일을 요청하여 받아온다. 

받아오는 파일에는 해당 페이지의 이미지파일(jpg, gif, png)등을 제외하고 보통 세가지 파일을 받아온다. '어쩌구.html', '어쩌구.css', '어쩌구.js' 이렇게 세가지 파일을 웹 브라우저가 받아다가 우리가 보는 페이지의 모습으로 해석해서 보여주는 것이다.

출처 : http://webberstudy.com/html-css/beginning/what-can-do/




>> 웹 기초적인 부분에 대해 잘 정리되어 있는 블로그 참고
https://eunajjing.github.io/2019/07/16/boostcouse-webdev/




>> 웹의 구성
구조 : 웹 콘텐츠에 의미를 부여하고 구조를 형성 → HTML
표현 : 시각적인 디자인과 레이아웃 표현 → CSS
행위 : 모든 front-end의 브라우저 상호작용을 담당 → JavaScript




>> 웹문서 구성 요소
- header
  HTML5에 새롭게 추가된 요소로서, 웹 문서 맨 윗부분에 있으며 웹 사이트 이름, 글로벌 링크(로그인, 회원가입, 사이트맵, 언어 선택등 웹사이트 어느 곳에서든지 이용할 수 있는 링크)등으로 구성된 영역이다.
    - 사이트의 이름, 내비게이션,헤드라인, 검색 등으로 구성된다.
	- 과거에는 <div id="header">와 같이 사용했었다.
	-문서나 각 section, article의 헤더 부분에 사용 가능하며, 그것들의 제목이나 간단한 소개 컨텐츠를 담을 수 있다.
	- 브라우저가 헤더영역을 인식할 수 있게되면 스크린리더의 내비게이션과 검색엔진의 색인에 도움을 줄 수 있다.
	
- nav
  HTML5에 새롭게 추가된 요소로서, 목적지로 이동할 수 있도록 링크를 별도로 모아둔 영역이다.
    - 링크 중에서 중요도가 높은 링크를 체계적으로 구성해 놓은 것으로 단순 본문 링크와 메뉴(카테고리) 성격의 링크인지 확인이 가능하다.
	- ul, li, a요소들을 여전히 함께 사용해야 한다.
	- 브라우저가 네비게이션 영역을 알 수 있게 되면 스크린리더의 내비게이션과 검색엔진의 색인에도 도움을 줄 수 있다.
	
- section
  HTML5에 새롭게 추가된 요소로서, 섹션을 표시한다.
    - 내용적 흐름과 구조를 만들기 위해 내용을 나누는 용도이다.
	- 같은 성격의 내용, 즉 관련있는 내용을 section 요소로 묶어 표시한다.
	- 뉴스와 광고 섹션 처럼 서로 다른 성격을 지닌 것들을 section 요소로 표시하면 영역 구분이 아주 명확해진다.
	- 탭과 같은 상위 주제 아래에 하위 주제로 엮인 탭 방식의 구성일때 각각의 탭을 section 요소로 표시할 수 있다.
	- 섹션은 독립적인 영역이라 섹션 내에서도 헤더와 푸터를 둘 수 있다. 이것은 섹션마다 나름의 제목 체계를 가질 수 있다는 것을 의미하며, 섹션마다 H1 요소를 가질 수 있게 되었다.
	- 스크린리더 사용자는 섹션 단위로 이동할 수 있으므로 문서내 내비게이션이 좀 더 수월해지고 검색엔진은 특정 섹션 중심으로 색인 활동을 할 수 있으므로 검색엔진의 효율성을 높일 수 있다.

- article
  HTML5에 새롭게 추가된 요소로서, 독립적으로 구성된 글을 표시한다.
    - 본문과 별개로 구성되어 다른 영역에 주거나 받지 않고 독립적으로 배포되거나 재사용할 수 있다.
    - 게시판의 게시물, 블로그 포스트, 댓글, 위젯에 담긴 콘텐츠등이 aticle에 해당한다.
    - section 요소가 관련 있는 내용을 묶는 역할이라면, aticle 요소는 관련 있는 내용 중에서 독립적으로 구성된 글을 별도로 묶는 역할이다.

- main
  HTML5 권고후보에 main요소가 추가되었다.
    - 문서내 main요소가 나오는 것은 1번만 허용
    - 단, main요소를 aticle, aside, footer, header, nav요소의 하위로 사용하지 않음
    - 섹션 콘텐츠가 아니기 때문에 아웃라인 생성하지 않음

  main 요소는 ARIA(Access Rich Internet Applications)의 role="main"에 매핑되지만, 사용자에이전트가 이 매핑을 포함할 때까지는 	

- aside
  aside 요소로 구성된 것을 검색엔진은 무시하고 본문 위주로 색인을 진행할 수 있고 스ㅋ린리더 사용자는 해당 영역이 어떤 성격의 영역인지 신속하게 파악할 수 있으므로 곧바로 다른 영역으로 이동할 수도 있다.

  
- footer
  HTML5에 새롭게 추가된 요소로서, 웹 문서 맨 아래쪽에 있으며 저작권 연락처등으로 구성된 영역이다.
    - 푸터는 바닥 영역 또는 꼬리말을 지칭하는데, 저작권, 연락정보 등 본문과의 관련성은 있지만 본문에는 담기 어려운 내용을 담는다.
	- 일반젇으로 푸터 영역은 한 문서 내에서 한 번만 제공되지만 section 요소나 article 요소 내에 있는 footer 요소는 해당 영역에 관한 꼬리말을 표시할 수 있다.
	- 맨위로 가기 링크나 헤더의 메인 내비게이션도 반복 제공을 위헤 푸터 영역에 둘 수 있다.
참고 : https://webdir.tistory.com/310



>> 선택자와 선언자 (Selector and Declaration)
http://www.nextree.co.kr/p8468/
* Selector(선택자) : css에서 꾸밈을 설정할 태그
* Declaration(선언자) : 꾸밈 설정할 내용




>> 선택자의 종류
 - tag selector
	태그별로 묶어서 꾸밀떄 사용
 - id selector
	각 고유의 id로 따로 설정할때 사용
 - class selector
	공통된 class로 묶어서 설정할 때 사용




>> 선택자의 다양한 사용법
http://flukeout.github.io/
이 사이트로 공부하다보면 정규표현식만큼 원하는 선택자를 잡을수 있도록 문법이 많이 있다.




>> 가상 클래스 선택자 (pseudo class selector)
클래스 선택자는 아니지만 엘리먼트들의 상태에 따라서 클래스 선택자처럼 여러 엘리먼트를 선택할 수 있음




>> web font
웹에서 쓰는 폰트가 없을경우 클라이언트쪽에서 다운받도록 하여 폰트가 보일 수 있도록 하는 기법




>> Stylish
기존에 있던 웹사이트에 있는 css를 커스컴해서 변경된 내용을 적용시켜주는 브라우저 앱. 색상을 변경하거나, 광고를 없애버리거나... 기존에 다른 사람이 만들어놓은 테마를 적용할 수도 있다.
* 강의 댓글 보니 Stylish는 보안정책때매 막혔고, Stylus로 대체 사용 가능하다고 함




>> Inline tag VS Block level tag
Inline tag : 화면의 일부를 차지하는 태그
Block level tag : 화면 전체를 사용하는 태그




>> 마진 겹침 현상
1. 두개의 다른 태그에서 마진을 공유할 수 있다.(겹쳐질 수 있다)
2. 부모 자식간의 마진도 겹쳐질 수 있다.
3. (top-margin, bottom-margin이 따로 있는경우) 시각적인 요소가 없는 태그의 마진은 마진중의 값이 큰것을 채택한다.




>> 포지션 (position)
position
- static(Default)
  기본값(position 설정이 안된 경우 기본적으로 설정되는 값).
  offset 설정이 안됨
  
- relative
  기존 태그의 위치를 기준으로 위치를 수정하고 싶을때
  

- absolute
  포지션이 static이 아닌 parents 태그의 위치를 기준으로 위치를 설정함
  상위 포지션이 없으면 html태그를 기준으로 잡음
  
  <offset을 left:0px, top:0px로 설정했을 경우>
  parents 태그가 static이 아닌 parents 태그의 시작위치를 가리킴
  (부모 태그가 static인 경우 더 상위 부모의 값을 확인함)
  
  <child 태그의 포지션이 absolute인 경우> 
    parents 태그와의 상속 관계가 사라지며, 독립적인 존재로 인식됨
    offset 값을 설정하지 않은 경우 기본 위치는 부모 컨텐츠 바로 아래에 위치하게 됨

- fixed
  html 전체위치중 offset으로 설정한 위치에 고정적으로 존재하게 됨
  
  <offset을 left:0px, top:0px로 설정했을 경우>
  html 페이지에서의 시작 위치를 가리킴
  
  <child 태그의 포지션이 fixed인 경우> 
    parents 태그와의 상속 관계가 사라지며, 독립적인 존재로 인식됨
	offset 값을 설정하지 않은 경우 기본 위치는 부모 컨텐츠 바로 아래에 위치하게 됨

*offset : 떨어진 정도




>> flex
layout을 나눌때 자주 사용하는 태그

-flex의 구성
  - flex container
    부모 요소
	전체적인 정렬이나 흐름에 대하여 정의
	속성 종류 : flex-direction, flex-wrap, justify-content, align-items, align-content
  - flex item
    자식 요소
	크기나 순서에 대하여 설정
	속성 종류 : flex, flex-grow, flex-shrink, flex-basis, order

- display:flex
  flex를 구성하려 할때, 정렬하려는 요소의 부모 요소에 선언해야함

- flex-direction
  각 레이어를 나눌 방향을 정하는 것
  
  flex-direction:row
  flex-direction:row-revers
  flex-direction:column
  flex-direction:column-reverse
  
- flex-basis
  해당 레이어의 크기를 정함
  
  flex-basis:auto (Default)
  flex-basis:(n)px

- flex-grow
  해당 레이어가 차지하는 비율(크기)을 정함

  flex-grow:0 (Default)
  flex-grow:(n)
  
- flex-shrink
  창크기를 줄였을때 레이어별 축소시킬 비율을 정함
  
  flex-shrink:1 (Default)
  flex-shrink:0
  flex-shrink:(n)

- flex 축약형
  flex: (grow) (shrink) (basis);
  
  - flex:initial(기본값)
    grow:0, shrink:1, basis:auto
  
  - flex:none
    grow:0, shrink:0, basis:auto
  
  - flex:auto
    grow:1, shrink:1, basis:auto

  - flex:1
    grow:1, shrink:1, basis:0  

- AA 클래스명의 N번째 자식요소에 대한 설정
  (AA):nth-child(N){ }
  


읽어두면 좋은 자료:
https://d2.naver.com/helloworld/8540176




>> media query
화면의 종류와 크기에 따라서 디자인을 달리 줄 수 있는 CSS의 기능
반응형 디자인의 핵심 기술
모바일 환경으로 접속했을때 화면 크기가 줄어들기 때문에 레이아웃 디자인이 변화된걸 본 경험이 있다. 이때 이 기술을 사용한 것

- @media(max-width:500px) { }
   width가 max에 도달하기 전 인 경우 (최댓값  낮은 까지)
   
- @media (min-width:600px) { }
  width가 min값 이상인 경우 (최솟값보다 높은 경우)
	
	


>> float
글의 본문안에서 이미지를 삽입할때 쓰는 방법.


- float: (left, right)
  해당 내용을 (설정한 방향)으로 두고 나머지 공백은 뒤에 오는것으로 어울리게 채우는 것
  
- clear: (left, right, both)
  <float 효과가 다른 태그와 같이 중복되다가 아래 하나만 독립시킬 경우>
  위의 float 방향에 맞추어 clear 시키거나, 무조건 clear 되는 both를 사용할 것
  
  
  
  
>> column (다단)

- column-count: 4
  단을 4개로 설정
 
- column-width: 200px
  한개의 단을 200px에 맞추어 설정
  
<count와 width 둘다 사용할 경우>
  (count)개이하의 컬럼으로, (width)px 이상으로 설정

- column-gap: 100px
  단과 단 사이의 간격을 100px로 설정
  
- column-rule-style: (solid, dashed, dotted)
  단과 단 사이에 실선, 점선, 닷선으로 설정

- column-rule-width: 1px;
  단과 단 사이의 선의 두께를 설정
  
- column-rule-color: red;
  단과 단 사이의 선의 색깔을 설정
  
- column-span: all;
  모든 단 사이에 걸치도록 설정
  

* 이미지들을 여러 개 이어서 보여줄 때에도 다단이 사용된다.

참고하면 좋은 자료:
https://opentutorials.org/module/2398/13712




>> SVG
svg는 백터(vector) 이미지를 표현하기 위한 포맷으로 w3c에서 만든 백터 이미지 표준

svg를 사용하여 백터 이미지를 css에서 생성/변환이 가능함




>> <link> 와 @import
: 분리된 css 파일을 html에 사용할 수 있도록 집어넣을때 쓰이는 태그

- @import
  스타일 시트를 포함한 css 매커니즘
  link에선 불가능한 css 파일 내에서 다른 css를 가져올 수 있도록 함
  

- <link>
  HTML 매커니즘
  여러 CSS를 비동기적으로 로드하고 해석할 수 있습니다

- 차이점
  브라우저를 이 두개를 다르게 처리하게 되는데 <link>가 성능 측면에서 더 이점이 있다고 함
  
참조 : https://stackoverflow.com/questions/1022695/difference-between-import-and-link-in-css
  



>> Minify
= 코드 경량화, 코드압축

- why?
  네트워크 트래픽을 최소화 하기 위하여. 네트워크 request 대역폭을 줄이기 위해.
  ** 약간 아직까진 공감을 못하겠음.



>> Preprocessor
= 전처리기

자신만의 특별한 syntax를 가지고 CSS를 생성하도록 하는 프로그램입니다.

* css를 작성할때 반복되거나 되게 귀찮거나 번거로운 작업들이 있는데 그것들을 빠르게 작성할 수 있도록 명령어 rule을 정해두고 이 프로그램을 사용하면 빠르게 만들 수 있도록 만든 프로그램

