※ 시작문자가 '*'인 경우 개인적인 정리를 의미함

>> 웹의 구성
구조 : 웹 콘텐츠에 의미를 부여하고 구조를 형성 → HTML
표현 : 시각적인 디자인과 레이아웃 표현 → CSS
행위 : 모든 front-end의 브라우저 상호작용을 담당 → JavaScript



>> 선택자와 선언자 (Selector and Declaration)
http://www.nextree.co.kr/p8468/
* Selector(선택자) : css에서 꾸밈을 설정할 태그
* Declaration(선언자) : 꾸밈 설정할 내용



>> 선택자의 종류
 - tag selector
	태그별로 묶어서 꾸밀떄 사용
 - id selector
	각 고유의 id로 따로 설정할때 사용
 - class selector
	공통된 class로 묶어서 설정할 때 사용



>> 선택자의 다양한 사용법
http://flukeout.github.io/
이 사이트로 공부하다보면 정규표현식만큼 원하는 선택자를 잡을수 있도록 문법이 많이 있다.



>> 가상 클래스 선택자 (pseudo class selector)
클래스 선택자는 아니지만 엘리먼트들의 상태에 따라서 클래스 선택자처럼 여러 엘리먼트를 선택할 수 있음



>> web font
웹에서 쓰는 폰트가 없을경우 클라이언트쪽에서 다운받도록 하여 폰트가 보일 수 있도록 하는 기법



>> Stylish
기존에 있던 웹사이트에 있는 css를 커스컴해서 변경된 내용을 적용시켜주는 브라우저 앱. 색상을 변경하거나, 광고를 없애버리거나... 기존에 다른 사람이 만들어놓은 테마를 적용할 수도 있다.
* 강의 댓글 보니 Stylish는 보안정책때매 막혔고, Stylus로 대체 사용 가능하다고 함



>> Inline tag VS Block level tag
Inline tag : 화면의 일부를 차지하는 태그
Block level tag : 화면 전체를 사용하는 태그



>> 마진 겹침 현상
1. 두개의 다른 태그에서 마진을 공유할 수 있다.(겹쳐질 수 있다)
2. 부모 자식간의 마진도 겹쳐질 수 있다.
3. (top-margin, bottom-margin이 따로 있는경우) 시각적인 요소가 없는 태그의 마진은 마진중의 값이 큰것을 채택한다.



>> 포지션 (position)
position
- static(Default)
  기본값(position 설정이 안된 경우 기본적으로 설정되는 값).
  offset 설정이 안됨
  
- relative
  기존 태그의 위치를 기준으로 위치를 수정하고 싶을때
  

- absolute
  포지션이 static이 아닌 parents 태그의 위치를 기준으로 위치를 설정함
  상위 포지션이 없으면 html태그를 기준으로 잡음
  
  <offset을 left:0px, top:0px로 설정했을 경우>
  parents 태그가 static이 아닌 parents 태그의 시작위치를 가리킴
  (부모 태그가 static인 경우 더 상위 부모의 값을 확인함)
  
  <child 태그의 포지션이 absolute인 경우> 
    parents 태그와의 상속 관계가 사라지며, 독립적인 존재로 인식됨
    offset 값을 설정하지 않은 경우 기본 위치는 부모 컨텐츠 바로 아래에 위치하게 됨

- fixed
  html 전체위치중 offset으로 설정한 위치에 고정적으로 존재하게 됨
  
  <offset을 left:0px, top:0px로 설정했을 경우>
  html 페이지에서의 시작 위치를 가리킴
  
  <child 태그의 포지션이 fixed인 경우> 
    parents 태그와의 상속 관계가 사라지며, 독립적인 존재로 인식됨
	offset 값을 설정하지 않은 경우 기본 위치는 부모 컨텐츠 바로 아래에 위치하게 됨

*offset : 떨어진 정도



>> flex
layout을 나눌때 자주 사용하는 태그

-flex의 구성
  - flex container
    부모 요소
	전체적인 정렬이나 흐름에 대하여 정의
	속성 종류 : flex-direction, flex-wrap, justify-content, align-items, align-content
  - flex item
    자식 요소
	크기나 순서에 대하여 설정
	속성 종류 : flex, flex-grow, flex-shrink, flex-basis, order

- display:flex
  flex를 구성하려 할때, 정렬하려는 요소의 부모 요소에 선언해야함

- flex-direction
  각 레이어를 나눌 방향을 정하는 것
  
  flex-direction:row
  flex-direction:row-revers
  flex-direction:column
  flex-direction:column-reverse
  
- flex-basis
  해당 레이어의 크기를 정함
  
  flex-basis:auto (Default)
  flex-basis:(n)px

- flex-grow
  해당 레이어가 차지하는 비율(크기)을 정함

  flex-grow:0 (Default)
  flex-grow:(n)
  
- flex-shrink
  창크기를 줄였을때 레이어별 축소시킬 비율을 정함
  
  flex-shrink:1 (Default)
  flex-shrink:0
  flex-shrink:(n)

- flex 축약형
  flex: (grow) (shrink) (basis);
  
  - flex:initial(기본값)
    grow:0, shrink:1, basis:auto
  
  - flex:none
    grow:0, shrink:0, basis:auto
  
  - flex:auto
    grow:1, shrink:1, basis:auto

  - flex:1
    grow:1, shrink:1, basis:0  

- AA 클래스명의 N번째 자식요소에 대한 설정
  (AA):nth-child(N){ }
  


읽어두면 좋은 자료:
https://d2.naver.com/helloworld/8540176




>> media query
화면의 종류와 크기에 따라서 디자인을 달리 줄 수 있는 CSS의 기능
반응형 디자인의 핵심 기술
모바일 환경으로 접속했을때 화면 크기가 줄어들기 때문에 레이아웃 디자인이 변화된걸 본 경험이 있다. 이때 이 기술을 사용한 것

- @media(max-width:500px) { }
   width가 max에 도달하기 전 인 경우 (최댓값  낮은 까지)
   
- @media (min-width:600px) { }
  width가 min값 이상인 경우 (최솟값보다 높은 경우)
	
	

>> float
글의 본문안에서 이미지를 삽입할때 쓰는 방법.


- float: (left, right)
  해당 내용을 (설정한 방향)으로 두고 나머지 공백은 뒤에 오는것으로 어울리게 채우는 것
  
- clear: (left, right, both)
  <float 효과가 다른 태그와 같이 중복되다가 아래 하나만 독립시킬 경우>
  위의 float 방향에 맞추어 clear 시키거나, 무조건 clear 되는 both를 사용할 것
  
  
  
  
>> column (다단)

- column-count: 4
  단을 4개로 설정
 
- column-width: 200px
  한개의 단을 200px에 맞추어 설정
  
<count와 width 둘다 사용할 경우>
  (count)개이하의 컬럼으로, (width)px 이상으로 설정

- column-gap: 100px
  단과 단 사이의 간격을 100px로 설정
  
- column-rule-style: (solid, dashed, dotted)
  단과 단 사이에 실선, 점선, 닷선으로 설정

- column-rule-width: 1px;
  단과 단 사이의 선의 두께를 설정
  
- column-rule-color: red;
  단과 단 사이의 선의 색깔을 설정
  
- column-span: all;
  모든 단 사이에 걸치도록 설정
  

* 이미지들을 여러 개 이어서 보여줄 때에도 다단이 사용된다.

참고하면 좋은 자료:
https://opentutorials.org/module/2398/13712
